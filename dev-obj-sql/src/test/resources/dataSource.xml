<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">

	 <!-- dataSource 配置 -->
    <bean id="cctDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <!-- <bean id="cctDataSource" class="com.zkr.yzd.enterprise.util.security.DecryptDruidSource" init-method="init" destroy-method="close"> -->
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${p.cct.jdbc.url}"/>
        <property name="username" value="${p.cct.jdbc.username}"/>
        <property name="password" value="${p.cct.jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${p.cct.ds.initialSize}"/>
        <property name="minIdle" value="${p.cct.ds.minIdle}"/>
        <property name="maxActive" value="${p.cct.ds.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${p.cct.ds.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${p.cct.ds.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${p.cct.ds.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,wall"/>
    </bean>
	
	<!-- mybatis文件配置，扫描所有mapper文件 -->
                    
 	<bean id="sqlSessionFactory0" class="org.mybatis.spring.SqlSessionFactoryBean">
           <property name="dataSource" ref="cctDataSource"/>        
           <property name="mapperLocations">            
             	<list>                
             	  	<value>classpath:cn/tomsnail/objsql/db/mybatis/common/dao/*.xml</value> 
             	</list>         
           </property>
    </bean>  

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:basePackage="cn.tomsnail.objsql.db.mybatis.common.dao"
          p:sqlSessionFactoryBeanName="sqlSessionFactory0"/>

    <!-- 对dataSource 数据源进行事务管理 -->
    <bean id="transactionManager0" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="cctDataSource"/>

    <!-- 事务管理 通知 -->
    <tx:advice id="txAdvice0" transaction-manager="transactionManager0">
        <tx:attributes>
            <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="page*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务 aop 配置 -->
    <aop:config>
        <aop:pointcut id="serviceMethods0" expression="execution(* cn.tomsnail.template.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice0" pointcut-ref="serviceMethods0"/>
    </aop:config>

    <!-- 启用对事务注解的支持 -->
    <tx:annotation-driven transaction-manager="transactionManager0"/>

</beans>